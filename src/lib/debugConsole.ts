// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
import { monitor } from './monitoring';

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
declare global {
  interface Window {
    carlynxLogs: () => void;
    carlynxClearLogs: () => void;
    carlynxExportLogs: () => void;
    carlynxMonitor: typeof monitor;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
export function initDebugConsole() {
  if (typeof window === 'undefined') return;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
  window.carlynxLogs = () => {
    const logs = monitor.exportLocalLogs();
    console.group('üîç CarLynx Production Logs');
    console.log(`Total logs: ${logs.length}`);
    
    logs.forEach((log) => {
      const emoji = {
        info: '‚ÑπÔ∏è',
        warn: '‚ö†Ô∏è',
        error: '‚ùå',
        debug: 'üêõ'
      }[log.level] || 'üìù';
      
      console.group(`${emoji} ${new Date(log.timestamp).toLocaleTimeString()} - ${log.event}`);
      console.log('Level:', log.level);
      console.log('Session:', log.sessionId);
      console.log('URL:', log.url);
      console.log('User Agent:', log.userAgent);
      if (log.data) {
        console.log('Data:', log.data);
      }
      console.groupEnd();
    });
    
    console.groupEnd();
    console.log('üí° Use carlynxClearLogs() to clear logs');
    console.log('üí° Use carlynxExportLogs() to export as JSON');
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
  window.carlynxClearLogs = () => {
    monitor.clearLogs();
    console.log('üóëÔ∏è Logs cleared');
  };

  // –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤
  window.carlynxExportLogs = () => {
    const logs = monitor.exportLocalLogs();
    const dataStr = JSON.stringify(logs, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `carlynx-logs-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    console.log('üì• Logs exported to file');
  };

  // –î–æ—Å—Ç—É–ø –∫ monitor –æ–±—ä–µ–∫—Ç—É
  window.carlynxMonitor = monitor;

  console.log('üöÄ CarLynx Debug Console Initialized');
  console.log('üìã Available commands:');
  console.log('  carlynxLogs() - View all logs');
  console.log('  carlynxClearLogs() - Clear logs');
  console.log('  carlynxExportLogs() - Export logs to file');
  console.log('  carlynxMonitor - Access monitor object directly');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (typeof window !== 'undefined') {
  // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initDebugConsole);
  } else {
    initDebugConsole();
  }
}